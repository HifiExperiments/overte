//
//  Created by Bradley Austin Davis on 2016/05/09
//  Copyright 2013 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

#ifndef hifi_ShapeEntityItem_h
#define hifi_ShapeEntityItem_h

#include "EntityItem.h"

#include "PulsePropertyGroup.h"

class ShapeEntityItem : public EntityItem {
    using Pointer = std::shared_ptr<ShapeEntityItem>;
    static Pointer baseFactory(const EntityItemID& entityID, const EntityItemProperties& properties);
public:
    static EntityItemPointer factory(const EntityItemID& entityID, const EntityItemProperties& properties);
    static EntityItemPointer sphereFactory(const EntityItemID& entityID, const EntityItemProperties& properties);
    static EntityItemPointer boxFactory(const EntityItemID& entityID, const EntityItemProperties& properties);

    using ShapeInfoCalculator = std::function<void( const ShapeEntityItem * const shapeEntity, ShapeInfo& info)>;
    static void setShapeInfoCalulator(ShapeInfoCalculator callback);

    ShapeEntityItem(const EntityItemID& entityItemID);

    void pureVirtualFunctionPlaceHolder() override { };
    // Triggers warnings on OSX
    //ALLOW_INSTANTIATION

    ENTITY_PROPERTY_SUBCLASS_METHODS

    void setUnscaledDimensions(const glm::vec3& value) override;

    bool supportsDetailedIntersection() const override;
    bool findDetailedRayIntersection(const glm::vec3& origin, const glm::vec3& direction,
                                     const glm::vec3& viewFrustumPos, OctreeElementPointer& element,
                                     float& distance, BoxFace& face, glm::vec3& surfaceNormal,
                                     QVariantMap& extraInfo, bool precisionPicking) const override;
    bool findDetailedParabolaIntersection(const glm::vec3& origin, const glm::vec3& velocity,
                                          const glm::vec3& acceleration, const glm::vec3& viewFrustumPos, OctreeElementPointer& element,
                                          float& parabolicDistance, BoxFace& face, glm::vec3& surfaceNormal,
                                          QVariantMap& extraInfo, bool precisionPicking) const override;
    bool getRotateForPicking() const override;

    virtual void computeShapeInfo(ShapeInfo& info) override;
    virtual ShapeType getShapeType() const override;

    PulsePropertyGroup getPulseProperties() const;

    void setUserData(const QString& value) override;

protected:

@Shape_ENTITY_PROPS@

    //! This is SHAPE_TYPE_ELLIPSOID rather than SHAPE_TYPE_NONE to maintain
    //! prior functionality where new or unsupported shapes are treated as
    //! ellipsoids.
    ShapeType _collisionShapeType { ShapeType::SHAPE_TYPE_ELLIPSOID };
};

#endif // hifi_ShapeEntityItem_h
