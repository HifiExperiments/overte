// <!
//  Created by Bradley Austin Davis on 2018/05/25
//  Copyright 2013-2018 High Fidelity, Inc.
//  Copyright 2024 Overte e.V.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
// !>

// <@if not GRAPHICS_SHADER_CONSTANTS_H@>
// <@def GRAPHICS_SHADER_CONSTANTS_H@>

// Hack comment to absorb the extra '//' scribe prepends

#ifndef GRAPHICS_SHADER_CONSTANTS_H
#define GRAPHICS_SHADER_CONSTANTS_H

#define GRAPHICS_BUFFER_MATERIAL 0
#define GRAPHICS_BUFFER_SKINNING 1
#define GRAPHICS_BUFFER_TRIPLANAR_SCALE 2

#define GRAPHICS_BUFFER_KEY_LIGHT 3
#define GRAPHICS_BUFFER_LIGHT 4
#define GRAPHICS_BUFFER_AMBIENT_LIGHT 5
#define GRAPHICS_BUFFER_HAZE_PARAMS 6

// Textures 0 - 11 are used by material layers (although usually fewer for 1 layer)
// 12 is the fade texture
// 13 is the skybox
// 14 is the ambient fresnel LUT
// 15 is the splat map
#define GRAPHICS_TEXTURE_MATERIAL_ALBEDO 0
#define GRAPHICS_TEXTURE_MATERIAL_NORMAL 1
#define GRAPHICS_TEXTURE_MATERIAL_METALLIC 2
#define GRAPHICS_TEXTURE_MATERIAL_EMISSIVE_LIGHTMAP 3
#define GRAPHICS_TEXTURE_MATERIAL_ROUGHNESS 4
#define GRAPHICS_TEXTURE_MATERIAL_OCCLUSION 5
#define GRAPHICS_TEXTURE_MATERIAL_SCATTERING 6

// 2 layers
#define GRAPHICS_TEXTURE_MATERIAL_ALBEDO2_2 6
#define GRAPHICS_TEXTURE_MATERIAL_NORMAL2_2 7
#define GRAPHICS_TEXTURE_MATERIAL_METALLIC2_2 8
#define GRAPHICS_TEXTURE_MATERIAL_EMISSIVE_LIGHTMAP2_2 9
#define GRAPHICS_TEXTURE_MATERIAL_ROUGHNESS2_2 10
#define GRAPHICS_TEXTURE_MATERIAL_OCCLUSION2_2 11

// 3 layers
#define GRAPHICS_TEXTURE_MATERIAL_ALBEDO2_3 4
#define GRAPHICS_TEXTURE_MATERIAL_NORMAL2_3 5
#define GRAPHICS_TEXTURE_MATERIAL_METALLIC2_3 6
#define GRAPHICS_TEXTURE_MATERIAL_EMISSIVE_LIGHTMAP2_3 7
#define GRAPHICS_TEXTURE_MATERIAL_ALBEDO3_3 8
#define GRAPHICS_TEXTURE_MATERIAL_NORMAL3_3 9
#define GRAPHICS_TEXTURE_MATERIAL_METALLIC3_3 10
#define GRAPHICS_TEXTURE_MATERIAL_EMISSIVE_LIGHTMAP3_3 11

#define GRAPHICS_TEXTURE_MATERIAL_MIRROR 1 // Mirrors use albedo textures, but nothing else

// MToon
// Keep aligned with procedural/ProceduralMaterialCache.h
#define GRAPHICS_TEXTURE_MATERIAL_SHADE GRAPHICS_TEXTURE_MATERIAL_METALLIC
#define GRAPHICS_TEXTURE_MATERIAL_SHADING_SHIFT GRAPHICS_TEXTURE_MATERIAL_ROUGHNESS
#define GRAPHICS_TEXTURE_MATERIAL_MATCAP GRAPHICS_TEXTURE_MATERIAL_OCCLUSION
#define GRAPHICS_TEXTURE_MATERIAL_RIM GRAPHICS_TEXTURE_MATERIAL_SCATTERING
#define GRAPHICS_TEXTURE_MATERIAL_UV_ANIMATION_MASK 7

// 2 layers
#define GRAPHICS_TEXTURE_MATERIAL_SHADE2_2 GRAPHICS_TEXTURE_MATERIAL_METALLIC2_2
#define GRAPHICS_TEXTURE_MATERIAL_SHADING_SHIFT2_2 GRAPHICS_TEXTURE_MATERIAL_ROUGHNESS2_2
#define GRAPHICS_TEXTURE_MATERIAL_MATCAP2_2 GRAPHICS_TEXTURE_MATERIAL_OCCLUSION2_2

// 3 layers
#define GRAPHICS_TEXTURE_MATERIAL_SHADE2_3 GRAPHICS_TEXTURE_MATERIAL_METALLIC2_3
#define GRAPHICS_TEXTURE_MATERIAL_SHADE3_3 GRAPHICS_TEXTURE_MATERIAL_METALLIC3_3

// The OpenGL spec says hardware must support at least 16 textures at once, so we use the last
// guaranteed slot for the splat map.
#define GRAPHICS_TEXTURE_MATERIAL_SPLAT 15

// Make sure these match the ones in render-utils/ShaderConstants.h
#define GRAPHICS_TEXTURE_SKYBOX 13
#define GRAPHICS_BUFFER_SKYBOX_PARAMS 7

// <!

namespace graphics { namespace slot {

namespace buffer {
enum Buffer {
    Material = GRAPHICS_BUFFER_MATERIAL,
    Skinning = GRAPHICS_BUFFER_SKINNING,
    TriplanarScale = GRAPHICS_BUFFER_TRIPLANAR_SCALE,
    KeyLight = GRAPHICS_BUFFER_KEY_LIGHT,
    Light = GRAPHICS_BUFFER_LIGHT,
    AmbientLight = GRAPHICS_BUFFER_AMBIENT_LIGHT,
    HazeParams = GRAPHICS_BUFFER_HAZE_PARAMS,
    SkyboxParams = GRAPHICS_BUFFER_SKYBOX_PARAMS,
};
} // namespace buffer

namespace texture {
enum Texture {
    MaterialAlbedo = GRAPHICS_TEXTURE_MATERIAL_ALBEDO,
    MaterialNormal = GRAPHICS_TEXTURE_MATERIAL_NORMAL,
    MaterialMetallic = GRAPHICS_TEXTURE_MATERIAL_METALLIC,
    MaterialEmissiveLightmap = GRAPHICS_TEXTURE_MATERIAL_EMISSIVE_LIGHTMAP, 
    MaterialRoughness = GRAPHICS_TEXTURE_MATERIAL_ROUGHNESS,
    MaterialOcclusion = GRAPHICS_TEXTURE_MATERIAL_OCCLUSION,
    MaterialScattering = GRAPHICS_TEXTURE_MATERIAL_SCATTERING,
    MaterialMirror = GRAPHICS_TEXTURE_MATERIAL_MIRROR,
    Skybox = GRAPHICS_TEXTURE_SKYBOX,

    MaterialShade = GRAPHICS_TEXTURE_MATERIAL_SHADE,
    MaterialShadingShift = GRAPHICS_TEXTURE_MATERIAL_SHADING_SHIFT,
    MaterialMatcap = GRAPHICS_TEXTURE_MATERIAL_MATCAP,
    MaterialRim = GRAPHICS_TEXTURE_MATERIAL_RIM,
    MaterialUVAnimationMask = GRAPHICS_TEXTURE_MATERIAL_UV_ANIMATION_MASK,

    MaterialSplat = GRAPHICS_TEXTURE_MATERIAL_SPLAT,
};
} // namespace texture

} } // namespace graphics::slot

// !>
// Hack Comment

#endif // GRAPHICS_SHADER_CONSTANTS_H

// <@if 1@>
// Trigger Scribe include
// <@endif@> <!def that !>

// <@endif@>

// Hack Comment
