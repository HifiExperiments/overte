<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  <$_SCRIBE_FILENAME$>
//  Generated on <$_SCRIBE_DATE$>
//
//  Created by Sam Gateau on 5/5/2015.
//  Copyright 2015 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//
<@include graphics/ShaderConstants.h@>

<@include graphics/skybox.slh@>

<@if HIFI_USE_FORWARD@>
    <@include gpu/Transform.slh@>
    <$declareStandardCameraTransform()$>

    <@include graphics/Light.slh@>
    <$declareLightBuffer()$>

    <@include graphics/Haze.slh@>
<@endif@>

LAYOUT(binding=GRAPHICS_TEXTURE_SKYBOX) uniform samplerCube cubeMap;

LAYOUT(binding=GRAPHICS_BUFFER_SKYBOX_PARAMS) uniform skyboxBuffer {
    Skybox skybox;
};

layout(location=0) in vec3  _normal;
layout(location=0) out vec4 _fragColor;

void main(void) {
    vec3 normal = normalize(_normal);
    vec3 skyboxTexel = texture(cubeMap, normal).rgb;
    vec3 skyboxColor = skybox.color.rgb;
    _fragColor = evalSkyboxColor(skyboxTexel, skyboxColor, skybox.color.a);

<@if HIFI_USE_FORWARD@>
    // FIXME: either move this elsewhere or give it access to isHazeEnabled() (which is in render-utils/LightingModel.slh)
    if (/*(isHazeEnabled() > 0.0) && */(hazeParams.hazeMode & HAZE_MODE_IS_ACTIVE) == HAZE_MODE_IS_ACTIVE) {
        TransformCamera cam = getTransformCamera();
        vec4 eyePositionWS = cam._viewInverse[3];
        // We choose an arbitrary large number > BLEND_DISTANCE in Haze.slh
        const float SKYBOX_DISTANCE = 32000.0;
        vec4 fragPositionWS = eyePositionWS + SKYBOX_DISTANCE * vec4(normal, 0.0);
        vec4 fragPositionES = cam._view * fragPositionWS;

        Light light = getKeyLight();
        vec3 lightDirectionWS = getLightDirection(light);

        vec4 hazeColor = computeHazeColor(fragPositionES.xyz, fragPositionWS.xyz, eyePositionWS.xyz, lightDirectionWS);
        _fragColor.rgb = mix(_fragColor.rgb, hazeColor.rgb, hazeColor.a);
    }
<@endif@>

}
